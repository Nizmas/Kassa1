@model Kassa1.Models.ClientInfo

@{
    ViewBag.Title = "Kassa #1";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="~/Scripts/jquery-3.4.1.js"></script>
<script src="~/Scripts/jquery.validate-vsdoc.js"></script>
<script src="~/Scripts/jquery.validate.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>
<script src="~/Scripts/print.min.js"></script>

<script type="text/javascript">
    function OnSuccess(data) {
        $("#results").html("");
        url = "https://localhost:44340/formular/printfile?fileName=" + data;
        if (data.includes('docx')) {
            console.log("Это же docx");
            const dummy = document.createElement('a');
            dummy.href = url;
            dummy.download = 'my-filename.ext';
            document.body.appendChild(dummy);
            dummy.click();
        }
        if (data.includes('pdf')) {
            console.log("Это же Pdf"); 
            printJS({
                printable: url,
                type: 'pdf'
            })
        }
    }
    function OnFailure(request, error) {
        var response = JSON.parse(request.responseText);
        for (var i = 0; i < response.length; i++) {
            var error = response[i];
            var fieldKey = error.Key;
            var message = error.Message;
            console.log(fieldKey + ': ' + message);
            var errorMsg = errorMsg + fieldKey + ': ' + message + '\r\n';
        }
        $("#results").html(errorMsg);
    }
</script>


<div>
    <h3>Заполнение шаблона документа</h3> <br />
    @{Html.EnableClientValidation();}
    @{Html.EnableUnobtrusiveJavaScript();}

    @using (Ajax.BeginForm("Create", null, new AjaxOptions
    {
        UpdateTargetId = "results",
        LoadingElementId = "loading",
        LoadingElementDuration = 1000,
        OnFailure = "OnFailure",
        OnSuccess = "OnSuccess"
    }, new { enctype = "multipart/form-data" }))
    {
        @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
        @Html.TextBoxFor(model => model.LastName, htmlAttributes: new { @Placeholder = "Иванов" })
        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })

        <br /><br />
        @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
        @Html.TextBoxFor(model => model.FirstName, htmlAttributes: new { @Placeholder = "Иван" })
        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
        <br /><br />
        @Html.LabelFor(model => model.MiddleName, htmlAttributes: new { @class = "control-label col-md-2" })
        @Html.TextBoxFor(model => model.MiddleName, htmlAttributes: new { @Placeholder = "Иванович" })
        @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
        <br /><br />
        @Html.LabelFor(model => model.LoanSum, htmlAttributes: new { @class = "control-label col-md-2" })
        @Html.TextBoxFor(model => model.LoanSum, htmlAttributes: new { @Placeholder = "Иванов" })
        @Html.ValidationMessageFor(model => model.LoanSum, "", new { @class = "text-danger" })
        <br /><br />
        @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
        </div>
        <br /> <br />
        @Html.TextBoxFor(model => model.Image, new { type = "file" })
        @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
        <br />
        <div>
            @Html.DropDownListFor(model => model.TemplateName, ViewBag.Templates as SelectList)
            @Html.ValidationMessageFor(model => model.TemplateName, "", new { @class = "text-danger" })
        </div>
        <br />
        <p><input type="submit" name="submit" value="Скачать" id="createDoc" /></p>
        <p><input type="submit" name="submit" value="Распечатать" id="createDoc" /></p>
    }
    <div id="loading" style="display:none; color:Red; font-weight:bold;">
        <p>Формирование документа...</p>
    </div>
    <div id="results"></div>
</div>